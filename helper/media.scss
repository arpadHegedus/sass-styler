/// Default saved media queries

$media_queries: () !default;

/// Load modules
@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

/// Possible media properties

$_media-properties: (
  type,
  any-hover,
  any-pointer,
  min-aspect-ratio,
  aspect-ratio,
  max-aspect-ratio,
  min-color,
  color,
  max-color,
  color-gamut,
  min-color-index,
  color-index,
  max-color-index,
  grid,
  min-height,
  height,
  max-height,
  hover,
  inverted-colors,
  light-level,
  min-monochrome,
  monochrome,
  max-monochrome,
  orientation,
  overflow-block,
  overflow-inline,
  pointer,
  min-resolution,
  resolution,
  max-resolution,
  scan,
  scripting,
  update,
  min-width,
  width,
  max-width
);

/// Possible media types

$_media-types: all print screen speech;

/// Generate media queries via saved keywords or simplified syntax
/// @example
///   @include media(1024px)                    // @media (min-width: 1024px)
///   @include media(screen 1024px)             // @media only screen and (min-width: 1024px)
///   @include media(max 1024px)                // @media (max-width: 1024px)
///   @include media(height 300px)              // @media (min-height: 300px)
///   @include media(max-height 300px)          // @media (max-height: 300px)
///   @include media(screen (max 1024px))       // @media only screen and (max-width: 1024px)
///   @include media(screen 620px (max 1024px)) // @media only screen and (min-width: 620px) and (max-width: 1024px)
///   @include media(620px, max 1024px)         // @media (min-width: 620px), (max-width: 1024px)
/// @example
///   $media-queries: (
///     large: 1024px
///   );
///   @include media(large)                     // @media (min-width: 1024px)
/// @param {list} $query... Media query keywords or short syntax

@mixin media($query...) {
  $media-query: _media-parse-lists($query);

  @media #{$media-query} {
    @content;
  }
}

/// Join multiple media queries
/// @param {list} $queries List of media query keywords or short syntax
/// @return {string}

@function _media-parse-lists($queries) {
  $media: null;

  @each $query in $queries {

    $map: _media-parse-list($query);

    @if $map {
      $parsed: null;

      @each $prop, $value in $map {
        $part: "";

        @if $value {
          @if $prop == type {
            $part: #{"only " + $value};
          }

          @else {
            $part: #{"(" + $prop + ": " + $value + ")"};
          }

          @if $parsed {
            $parsed: string.unquote("#{$parsed} and #{$part}");
          }

          @else {
            $parsed: $part;
          }
        }
      }

      @if $media {
        $media: string.unquote("#{$media}, #{$parsed}");
      }

      @else {
        $media: $parsed;
      }
    }
  }

  @if $media {
    @return $media;
  }

  @return $queries;
}

/// Parse a singular media query
/// @param {list|number|string} $query Media query short syntax
/// @return {string}

@function _media-parse-list($query) {
  $prop: _media-parse-list-prop($query);

  @if $prop {
    @return _media-parse-part($query);
  }

  @return _media-parse-items($query);
}

/// Get the items of a media query
/// @param {list|number|string} $query Media query short syntax part
/// @return {null|map}

@function _media-parse-items($query) {
  $map: null;

  @each $part in $query {
    $part: _media-parse-part($part);

    @if $part {
      @if $map {
        $map: map.merge($map, $part);
      }

      @else {
        $map: $part;
      }
    }
  }

  @return $map;
}

/// Get the parts of a media query item
/// @param {list|number|string} $part Media query short syntax part
/// @return {null|map}

@function _media-parse-part($part) {
  @if map.has-key($media-queries, $part) {
    @return _media-parse-list(map.get($media-queries, $part));
  }

  @if list.index($_media-types, $part) != null {
    @return (type: $part);
  }

  @if meta.type-of($part) == number {
    @return (min-width: $part);
  }

  @if meta.type-of($part) == list {
    $prop: _media-parse-list-prop($part);
    $value: _media-parse-list-value($part);

    @if $prop and $value {
      @return ($prop: $value);
    }
  }

  @return null;
}

/// Get a property segment of a list in a media query part
/// @param {list|string} $list Media query proprety
/// @return {null|map}

@function _media-parse-list-prop($list) {
  @each $item in $list {
    @if $item == max or $item == min {
      @return #{$item + "-width"};
    }

    @else if $item == width or $item == height {
      @return #{"min-" + $item};
    }

    @else if list.index($_media-properties, $item) {
      @return $item;
    }
  }

  @return null;
}

/// Get a value segment of a list in a media query part
/// @param {list|string} $list Media query value
/// @return {mixed}

@function _media-parse-list-value($list) {
  $prop: _media-parse-list-prop($list);

  @each $item in $list {
    @if list.index(min max width height $prop, $item) == null {
      @return $item;
    }
  }

  @return null;
}
