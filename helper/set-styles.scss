/// Style options to set up default element styles with
/// @group helper

$styles: () !default;

@use "sass:map";
@use "../utility/declare-map" as *;
@use "../utility/get" as *;
@use "../utility/merge" as *;
@use "script-direction" as *;
@use "spacing" as *;

/// Set default styles for common elements
/// @example
///   @use "../node_modules/sass-styler/styler";
///   styler.styles: (
///     font-size: 18px,
///     font-family: Arial, sans-serif;
///     color: #333;
///     link: (
///       color: blue,
///       text-decoration: none,
///       hover-focus: (
///         text-decotaion: underline
///       )
///     ),
///     heading: (
///       font-weight: 700
///     ),
///     h1: (
///       font-size: 3em
///     ),
///     input: (
///       border: 1px solid #333
///     )
///   );
///   @include set-styles();
/// @group helper

@mixin set-styles() {
  /* stylelint-disable no-descending-specificity */

  /* document root */
  html {
    @include declare-map(
      map.remove(
        $styles,
        height,
        hr,
        link,
        max-width,
        max-height,
        min-height,
        min-width,
        vertical-align,
        width
      )
    );
  }

  /* bold elements */
  b,
  strong,
  dt {
    @include declare-map(map.get($styles, bold));
  }

  /* italic elements */
  em,
  dfn,
  var {
    @include declare-map(map.get($styles, italic));
  }

  /* underline elements */
  ins,
  u {
    @include declare-map(map.get($styles, underline));
  }

  /* line-through elements */
  del,
  s {
    @include declare-map(map.get($styles, line-through));
  }

  /* small */
  small {
    @include declare-map(map.get($styles, small));
  }

  /* subscript */
  sub {
    @include declare-map(map.get($styles, sub));
  }

  /* superscript */
  sup {
    @include declare-map(map.get($styles, sup));
  }

  /* code elements */
  code,
  kbd,
  samp {
    @include declare-map(map.get($styles, code));
  }

  /* pre */
  pre {
    @include declare-map(map.get($styles, pre));
  }

  /* mark */
  mark {
    @include declare-map(map.get($styles, mark));
  }

  /* abbr with title */
  abbr[title] {
    @include declare-map(map.get($styles, abbr));
  }

  /* blockquote and quote */
  blockquote,
  q {
    @include declare-map(map.get($styles, quote));
  }

  /* cite */
  cite {
    @include declare-map(map.get($styles, cite));
  }

  /* horizontal ruler */
  hr {
    border: 0;
    border-top: map.get($styles, hr);
  }

  /* headings */
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @include declare-map(map.get($styles, heading));
  }

  /* h1 */
  h1 {
    @include declare-map(map.get($styles, h1));
  }

  /* h2 */
  h2 {
    @include declare-map(map.get($styles, h2));
  }

  /* h3 */
  h3 {
    @include declare-map(map.get($styles, h3));
  }

  /* h4 */
  h4 {
    @include declare-map(map.get($styles, h4));
  }

  /* h5 */
  h5 {
    @include declare-map(map.get($styles, h5));
  }

  /* h6 */
  h6 {
    @include declare-map(map.get($styles, h6));
  }

  /* link */
  a {
    @include declare-map(map.get($styles, link));
  }

  /* dialog */
  dialog {
    @include declare-map(map.get($styles, dialog));
  }

  /* fieldset */
  fieldset {
    @include declare-map(map.get($styles, fieldset));
  }

  /* legend */
  legend {
    @include declare-map(map.get($styles, legend));
  }

  /* optgroup */
  optgroup {
    @include declare-map(map.get($styles, optgroup));
  }

  /* label */
  label {
    @include declare-map(map.get($styles, label));
  }

  /* input */
  input:not([type]),
  [type="color"],
  [type="date"],
  [type="datetime"],
  [type="datetime-local"],
  [type="email"],
  [type="image"],
  [type="month"],
  [type="number"],
  [type="password"],
  [type="search"],
  [type="tel"],
  [type="text"],
  [type="time"],
  [type="url"],
  [type="week"],
  select,
  textarea {
    @include declare-map(map.remove(map.get($styles, input), gap));
  }

  /* file input */
  [type="file"] {
    @include declare-map(
      merge(map.remove(map.get($styles, input), gap), map.get($styles, file))
    );
  }

  /* multiline inputs */
  textarea,
  select[multiple] {
    @include declare-map(map.get($styles, input-multiline));
  }

  /* textarea */
  textarea {
    @include declare-map(map.get($styles, textarea));
  }

  /* select */
  select:not([multiple]) {
    @include declare-map(map.get($styles, select));
  }

  /* standardize option in browsers */
  select[multiple] option {
    padding: if(
      get($styles, input padding),
      get($styles, input padding),
      0.25em 0
    );
  }

  /* clickable inputs */
  [type="checkbox"],
  [type="radio"] {
    outline: get($styles, input outline);

    label > &,
    > label {
      margin-#{script-direction()}: get($styles, input gap);
    }
  }

  /* button */
  button,
  [type="button"],
  [type="reset"],
  [type="submit"],
  summary {
    @include declare-map(map.get($styles, button));
  }

  /* caption */
  caption {
    @include declare-map(map.get($styles, caption));
  }

  /* table */
  table {
    @include declare-map(map.get($styles, table));
  }

  /* table cell */
  th,
  td {
    @include declare-map(map.get($styles, table-cell));

    /* table odd column */
    &:nth-child(2n + 1) {
      @include declare-map(map.get($styles, table-odd-column));
    }

    /* table even column */
    &:nth-child(2n) {
      @include declare-map(map.get($styles, table-even-column));
    }
  }

  /* odd/even table rows */
  tr {
    /* table odd row */
    &:nth-child(2n + 1) td,
    &:nth-child(2n + 1) th {
      @include declare-map(map.get($styles, table-odd-row));
    }

    /* table even row */
    &:nth-child(2n) td,
    &:nth-child(2n) th {
      @include declare-map(map.get($styles, table-even-row));
    }
  }

  /* thead */
  thead {
    @include declare-map(map.get($styles, thead));
  }

  /* table head */
  th,
  thead td {
    @include declare-map(map.get($styles, table-head));
  }

  /* tfoot */
  tfoot {
    @include declare-map(map.get($styles, tfoot));
  }

  /* table foot */
  tfoot th,
  tfoot td {
    @include declare-map(map.get($styles, table-foot));
  }

  /* selection */
  ::-webkit-selection {
    @include declare-map(map.get($styles, selection));
  }

  ::-moz-selection {
    @include declare-map(map.get($styles, selection));
  }

  ::selection {
    @include declare-map(map.get($styles, selection));
  }

  input::-webkit-selection {
    @include declare-map(map.get($styles, selection));
  }

  input::-moz-selection {
    @include declare-map(map.get($styles, selection));
  }

  input::selection {
    @include declare-map(map.get($styles, selection));
  }

  textarea::-webkit-selection {
    @include declare-map(map.get($styles, selection));
  }

  textarea::-moz-selection {
    @include declare-map(map.get($styles, selection));
  }

  textarea::selection {
    @include declare-map(map.get($styles, selection));
  }

  /* apply spacing to common elements */
  @include spacing();
}
