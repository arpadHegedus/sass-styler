@use "sass:color";
@use "sass:math";
@use "luminance" as *;
@use "srgb" as *;
@use "xyz" as *;
@use "is-between" as *;

/// Scale a luminance of a color by a set value
/// @param {Color} $color - Color
/// @param {Number} $luminance - Luminance
/// @return {Color}
/// @group Utility

@function scale-luminance($color, $luminance) {
    $scale: $luminance / luminance($color);
    $red: math.clamp(xyz(color.red($color)), 0, 1) * $scale;
    $green: math.clamp(xyz(color.green($color)), 0, 1) * $scale;
    $blue: math.clamp(xyz(color.blue($color)), 0, 1) * $scale;
    $red-passes: is-between($red);
    $green-passes: is-between($green);
    $blue-passes: is-between($blue);
    @if not $red-passes or not $green-passes or not $blue-passes {
        $baseline: math.min($red, $green, $blue);
        $r: $red / $baseline;
        $g: $green / $baseline;
        $b: $blue / $baseline;
        @if not $red-passes {
            $luminance: $luminance - 0.2126;
            $r: 0;
        }
        @if not $green-passes {
            $luminance: $luminance - 0.7152;
            $g: 0;
        }
        @if not $blue-passes {
            $luminance: $luminance - 0.0722;
            $b: 0;
        }
        $x: $luminance / ($r * 0.2126 + $g * 0.7152 + $b * 0.0722);
        @if $red-passes {
            $red: $r * $x;
        }
        @if $green-passes {
            $green: $g * $x;
        }
        @if $blue-passes {
            $blue: $b * $x;
        }
    }
    @return rgb(srgb($red), srgb($green), srgb($blue));
}
