/// All CSS pseudo classes or elements
/// @type Map
/// @group utility

$_pseudo: (
    active,
    after,
    any-link,
    before,
    blank,
    checked,
    cue,
    cue-region,
    default,
    defined,
    disabled,
    empty,
    enabled,
    first,
    first-child,
    first-letter,
    first-line,
    first-of-type,
    focus,
    focus-visible,
    focus-within,
    fullscreen,
    future,
    grammar-error,
    hover,
    in-range,
    intermediate,
    invalid,
    lang,
    last-child,
    last-of-type,
    left,
    link,
    local-link,
    marker,
    only-of-type,
    only-child,
    optional,
    out-of-range,
    past,
    paused,
    picture-in-picture,
    placeholder,
    placeholder-shown,
    playing,
    read-only,
    read-write,
    required,
    right,
    root,
    selection,
    scope,
    spelling-error,
    target,
    target-within,
    valid,
    visited
);

/// All CSS pseudo classes or elements that have parameters
/// @type Map
/// @group utility

$_pseudo-parameters: (
    any,
    current,
    dir,
    has,
    host,
    host-context,
    is,
    lang,
    matches,
    "not",
    nth-child,
    nth-col,
    nth-last-child,
    nth-last-col,
    nth-last-of-type,
    nth-of-type,
    part,
    slotted,
    user-invalid,
    where
);

@use "sass:list";
@use "sass:string";

/// Check whether a pseudo class is valid in CSS3
/// @param {String} $pseudo - The state
/// @param {Boolean} $string [false] - Whether to check it strictly
/// @return {Boolean}
/// @group utility

@function is-pseudo($pseudo, $strict: false) {
    @if $strict and string.index($pseudo, ":") != 1 {
        @return false;
    }
    $pseudo: if(string.index($pseudo, ":") == 1, string.slice($pseudo, 2), $pseudo);
    $pseudo: if(string.index($pseudo, ":") == 1, string.slice($pseudo, 2), $pseudo);
    @if list.index($_pseudo, $pseudo) {
        @return true;
    }
    @each $p in $_pseudo-parameters {
        @if string.index($pseudo, $p) == 1 {
            @return true;
        }
    }
    @return false;
}
